<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:QuizizzSupport">
    <Color x:Key="ValidationErrorColor">#f44336</Color>
    <Color x:Key="BackgroundColor">#FF252525</Color>
    <Color x:Key="LightBackgroundColor">#3B3B3B</Color>
    <Color x:Key="DefaultFontColor">#e4ebea</Color>
    <Color x:Key="GradientStartButtonColor">#D500F9</Color>
    <Color x:Key="GradientStopButtonColor">#FF5722</Color>
    <Color x:Key="HoverGradientStartButtonColor">#E040FB</Color>
    <Color x:Key="HoverGradientStopButtonColor">#FF7043</Color>
    <Color x:Key="DiscordColor">#7289da</Color>


    <SolidColorBrush x:Key="ValidationErrorBrush" Color="{StaticResource ValidationErrorColor}"/>
    <SolidColorBrush x:Key="defaultForeground" Color="Brown"/>
    <SolidColorBrush x:Key="DefaultBackground" Color="{StaticResource BackgroundColor}"/>
    <SolidColorBrush x:Key="LightBackground" Color="{StaticResource LightBackgroundColor}"/>
    <SolidColorBrush x:Key="FontColor" Color="{StaticResource DefaultFontColor}"/>
    <SolidColorBrush x:Key="AnswerColor" Color="#AFB42B"/>
    <SolidColorBrush x:Key="QuestionSearch" Color="#FFEA01"/>
    <SolidColorBrush x:Key="SpecialQuestion" Color="#00BCD4"/>
    <SolidColorBrush x:Key="SpecialQuestionSearch" Color="#FFEA00"/>
    <SolidColorBrush x:Key="ButtonColor" Color="#1E88E5"/>
    <SolidColorBrush x:Key="HoverButton" Color="#2499F7"/>
    <SolidColorBrush x:Key="GradientStartButton" Color="#E040FB"/>
    <SolidColorBrush x:Key="GradientStopButton" Color="#AD1457"/>
    <SolidColorBrush x:Key="DiscordBrush" Color="{DynamicResource DiscordColor}"/>

    <Style TargetType="{x:Type Window}">
    </Style>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="#e4ebea"/>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="ButtonBase">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="#4589FF" />
        <Setter Property="Padding" Value="12,8,12,8" />
        <Setter Property="FontFamily" Value="Montserrat Regular"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" x:Name="BtnBorder"  Padding="{TemplateBinding Padding}" CornerRadius="5">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#80aeff"/>
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Padding" Value="12,8,12,8" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="Colorful" BasedOn="{StaticResource ButtonBase}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush EndPoint="1,0" StartPoint="0,1" MappingMode="RelativeToBoundingBox" SpreadMethod="Pad">
                    <GradientStop Color="{StaticResource GradientStartButtonColor}" Offset="0.9"/>
                    <GradientStop Color="{StaticResource GradientStopButtonColor}"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" x:Name="BtnBorder"  Padding="12,8,12,8" CornerRadius="5">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="1,0" StartPoint="0,1" MappingMode="RelativeToBoundingBox" SpreadMethod="Pad">
                            <GradientStop Color="{StaticResource HoverGradientStartButtonColor}" Offset="0.9"/>
                            <GradientStop Color="{StaticResource HoverGradientStopButtonColor}"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="Padding" Value="10,6,10,6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="Transparent" BorderBrush="#666666" BorderThickness="2" Padding="10,6,10,6" CornerRadius="5">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="TopTabButton" BasedOn="{StaticResource ButtonBase}">
        <Setter Property="Background" Value="{StaticResource LightBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" Padding="8,4,8,4" CornerRadius="5" Margin="0,5,0,5">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#ff4d4d">
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TogglePressed" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBase}">
        <Setter Property="Background" Value="{StaticResource LightBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="Transparent" BorderBrush="#FF4D4D" BorderThickness="1" Padding="6,2,6,2" CornerRadius="5" Margin="5,5,5,5">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="#ff4d4d" BorderBrush="#FF4D4D" BorderThickness="1" Padding="6,2,6,2" CornerRadius="5" Margin="5,5,5,5">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="Normal" BasedOn="{StaticResource ButtonBase}">
        <Setter Property="Background" Value="{StaticResource ButtonColor}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource HoverButton}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Label}">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Montserrat Medium"/>
        <Setter Property="Foreground" Value="{StaticResource FontColor}"/>
        <Setter Property="Padding" Value="2"/>
    </Style>

    <ControlTemplate x:Key="TextBoxBaseControlTemplate" TargetType="{x:Type TextBoxBase}">
        <Border Background="{TemplateBinding Background}" 
                x:Name="Bd"
                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Padding="4">
            <ScrollViewer x:Name="PART_ContentHost" Padding="0" VerticalAlignment="Center" >
            </ScrollViewer>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="PasswordBoxBaseControlTemplate" TargetType="{x:Type PasswordBox}">
        <Border Background="{TemplateBinding Background}" 
                x:Name="Bd"
                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Padding="4">
            <ScrollViewer x:Name="PART_ContentHost" Padding="0" VerticalAlignment="Center" >
            </ScrollViewer>
        </Border>
    </ControlTemplate>

    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Montserrat Regular"/>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="{StaticResource LightBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="5">
                        <ScrollViewer x:Name="PART_ContentHost" Padding="0">
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Montserrat Regular"/>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="{StaticResource LightBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="5">
                        <ScrollViewer x:Name="PART_ContentHost" Padding="0">
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="Transparent" />
                        <Border x:Name="Rectangle1" CornerRadius="5,0,0,5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto"  Background="{TemplateBinding Background}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="Horizontal">
                            <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                            <Setter TargetName="Rectangle1" Property="Height" Value="Auto" />
                            <Setter TargetName="Rectangle1" Property="CornerRadius" Value="0,0,5,5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" />
                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Grid.Column="0" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        <!--<Rectangle Grid.Row="1" Grid.Column="1" Fill="Red"/>-->
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Background" Value="{StaticResource LightBackground}" />
        <Setter Property="Foreground" Value="#5B5B5B"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Border x:Name="BackgroundBorder" Background="{TemplateBinding Background}" CornerRadius="5,0,0,5">
                        <Grid x:Name="GridRoot" Width="19">
                            <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}" />
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                            <Setter Value="#5B5B5B" TargetName="Thumb" Property="Background" />
                        </Trigger>
                        <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                            <Setter Value="#6B6B6B" TargetName="Thumb" Property="Background" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter Property="Margin" Value="0,0,0,0"/>
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="BackgroundBorder" Property="CornerRadius" Value="5,5,0,0"/>
                            <Setter TargetName="PART_Track" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width" Value="Auto" />
                            <Setter Property="Height" Value="8" />
                            <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type CheckBox}" TargetType="CheckBox">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"  
              Width="20" 
              Height="20" 
              CornerRadius="200" 
              Background="{DynamicResource DefaultBackground}"
              BorderThickness="2"
              BorderBrush="{DynamicResource LightBackground}">
                                <!--<Path
                Width="9" Height="9" 
                x:Name="CheckMark"
                SnapsToDevicePixels="False" 
                Stroke="{DynamicResource SecondaryLight}"
                StrokeThickness="3"
                Data="M 0 0 L 9 9 M 0 9 L 9 0" />-->
                                <Path x:Name="CheckMark" Fill="{DynamicResource FontColor}" HorizontalAlignment="Center" VerticalAlignment="Center" >
                                    <Path.Data>
                                        <EllipseGeometry Center="5,5" RadiusX="5" RadiusY="5" />
                                    </Path.Data>
                                </Path>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="0,0,0,0"
            VerticalAlignment="Center"
            HorizontalAlignment="Left"
            RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource LightBackground}" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DefaultBackground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Window" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="20,8,20,8"/>
    </Style>

    <Style TargetType="{x:Type Border}" x:Key="TopTab">
        <Setter Property="CornerRadius" Value="15"/>
        <Setter Property="BorderThickness" Value="0,0,0,2"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightBackground}"/>
    </Style>

</ResourceDictionary>